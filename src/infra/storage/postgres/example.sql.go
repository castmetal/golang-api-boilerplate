// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: example.sql

package postgres

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createExample = `-- name: CreateExample :exec
insert into example (
    "id",
    "name",
    "created_at",
    "updated_at",
    "deleted_at"
) values ($1, $2, $3, $4, $5)
`

type CreateExampleParams struct {
	ID        uuid.UUID
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt sql.NullTime
}

func (q *Queries) CreateExample(ctx context.Context, arg CreateExampleParams) error {
	_, err := q.db.Exec(ctx, createExample,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	return err
}

const getExampleByID = `-- name: GetExampleByID :one
select id, name, created_at, updated_at, deleted_at from example
where deleted_at is null
    and id = $1
`

func (q *Queries) GetExampleByID(ctx context.Context, id uuid.UUID) (Example, error) {
	row := q.db.QueryRow(ctx, getExampleByID, id)
	var i Example
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getExampleByName = `-- name: GetExampleByName :one
select id, name, created_at, updated_at, deleted_at from example
where 
    name = $1
`

func (q *Queries) GetExampleByName(ctx context.Context, name string) (Example, error) {
	row := q.db.QueryRow(ctx, getExampleByName, name)
	var i Example
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllExamples = `-- name: ListAllExamples :many
select id, name, created_at, updated_at, deleted_at from example
where deleted_at is null
order by created_at desc
LIMIT $1
OFFSET $2
`

type ListAllExamplesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAllExamples(ctx context.Context, arg ListAllExamplesParams) ([]Example, error) {
	rows, err := q.db.Query(ctx, listAllExamples, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Example
	for rows.Next() {
		var i Example
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
